angular.module("browserPushNotifications",[]).provider("BrowserPushNotifications",function(){var a="/service-worker.js",b=!0;this.setWorkerUrl=function(b){a=b},this.setUserVisibleOnly=function(a){b=a},this.$get=["$q","$log","BrowserPushNotificationsStatus","$rootScope",function(c,d,e,f){var g={_getPermissions:function(){return"denied"===Notification.permission?Promise.reject(e.USER_BLOCKED_NOTIFICATIONS):Promise.resolve(Notification.permission)},_getServiceWorkerRegistration:function(){return navigator.serviceWorker.ready["catch"](function(){return Promise.reject(e.WORKER_REGISTRATION_FAIL)})},_getSubscription:function(a){return a.pushManager.getSubscription().then(function(c){return c?(d.debug("Subscription found!"),c):a.pushManager.subscribe({userVisibleOnly:b})})["catch"](function(a){return d.debug(a),Promise.reject(e.FAILED_TO_SUBSCRIBE)})},_notificationsSupported:function(){return"showNotification"in ServiceWorkerRegistration.prototype?Promise.resolve():Promise.reject(e.NOTIFICATIONS_NOT_SUPPORTED)},_pushMessagingSupported:function(){return"PushManager"in window?Promise.resolve():Promise.reject(e.PUSH_NOT_SUPPORTED)},register:function(){var a=c.defer();return g._workersSupported().then(function(){return d.debug("Workers are supported"),g._registerWorker()}).then(function(){return d.debug("Worker has been registered"),g._notificationsSupported()}).then(function(){return d.debug("Notifications are supported"),g._pushMessagingSupported()}).then(function(){return d.debug("Push is supported"),g._getPermissions()}).then(function(a){return d.debug("Permission: ",a),g._getServiceWorkerRegistration()}).then(function(a){return d.debug("Service registration: ",a),g._getSubscription(a)}).then(function(b){f.$apply(a.resolve.bind(a,b))})["catch"](function(b){f.$apply(a.reject.bind(a,b))}),a.promise},getSubscriptionId:function(){return g.register().then(function(a){return a.subscriptionId?a.subscriptionId:a.endpoint.split("/").pop()})},_registerWorker:function(){return a.lastIndexOf("/")>0&&d.warn("Worker url should be at the root of the domain"),navigator.serviceWorker.register(a)},_workersSupported:function(){return"serviceWorker"in navigator?Promise.resolve():Promise.reject(e.WORKERS_NOT_SUPPORTED)}};return g}]}).value("BrowserPushNotificationsStatus",{WORKERS_NOT_SUPPORTED:"workers_not_supported",NOTIFICATIONS_NOT_SUPPORTED:"notifications_not_supported",PUSH_NOT_SUPPORTED:"push_not_supported",USER_BLOCKED_NOTIFICATIONS:"user_blocked_notifications",WORKER_REGISTRATION_FAIL:"worker_registration_fail",FAILED_TO_SUBSCRIBE:"failed_to_subscribe"});